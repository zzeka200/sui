searchState.loadedDescShard("typed_store", 0, "A helper macro to simplify common operations for opening …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA helper macro to reopen multiple column families. The …\nRepeatedly attempt an Optimistic Transaction until it …\nStorage Atomicity Layer Library (aka Sally) is a wrapper …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides a mutable struct to form a collection of database …\nAn interface to a rocksDB database, keyed by a columnfamily\nThin wrapper to unify interface across different db types\nTODO: Good description of why we’re doing this : RocksDB …\nReturns a vector of values corresponding to the keys …\nCreates a default RocksDB option, to be used when RocksDB …\nDeletes a set of keys given as an iterator\nDeletes a range of keys between <code>from</code> (inclusive) and <code>to</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninserts a range of (key, value) pairs given as an iterator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator visiting each key-value pair in the …\nmerges a range of (key, value) pairs given as an iterator\nReturns a vector of values corresponding to the keys …\nReturns a vector of raw values corresponding to the keys …\nConvenience method for batch insertion\nConvenience method for batch removal\nCreate a new batch associated with a DB reference.\nOpens a database from a path, with specific options and an …\nOpens a database with options, and a number of column …\nOpens a database with options, and a number of column …\nOpens a database with options, and a number of column …\nOpens a database with options, and a number of column …\nsimilar to <code>merge_batch</code> but allows merge with partial values\nSimilar to <code>iter_with_bounds</code> but allows specifying …\nReopens an open database as a typed map operating under a …\nWrites a range delete tombstone to delete all entries in …\nDeletes a range of keys between <code>from</code> (inclusive) and <code>to</code> …\nTry to catch up with primary when running as secondary\nReturns an unbounded iterator visiting each key-value pair …\nThis method first drops the existing column family and …\nConsume the batch and write its operations to the database\ncustom rocksdb merge operator used for storing objects …\nA Sally column could be anything that implements key value …\nOptions to configure an individual column in a sally db …\nOptions to configure a sally db instance at the global …\nA SallyIter provides an iterator over all key values in a …\nA SallyIter provides an iterator over all keys in a sally …\nOptions to configure a sally db instance for performing …\nA SallyIter provides an iterator over all values in a …\nA Sally write batch provides a mutable struct which holds …\nCreates a default RocksDB option, to be used when RocksDB …\nDeletes a set of keys given as an iterator\nDeletes a range of keys between <code>from</code> (inclusive) and <code>to</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninserts a range of (key, value) pairs given as an iterator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWill give the next item backwards\nWill make the direction of the iteration reverse and will …\nMoves the iterator the element given or the one prior to …\nSkips all the elements that are smaller than the given key,\nSeeks to the last key in the database (at this column …\nThe self-referencing struct.\nAn interface to a btree map backed sally database. This is …\nThe self-referencing struct.\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nThe self-referencing struct.\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nAn iterator with a reverted direction to the original. The …\nThe self-referencing struct.\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nA more verbose but stable way to construct …\nProvides an immutable reference to <code>direction</code>. This method …\nProvides an immutable reference to <code>iter</code>. This method was …\nProvides an immutable reference to <code>iter</code>. This method was …\nProvides an immutable reference to <code>iter</code>. This method was …\nCalls <code>TestDBIter::new()</code> using the provided values. This is …\nCalls <code>TestDBIter::new()</code> using the provided values. This is …\nCalls <code>TestDBIter::new()</code> using the provided values. This is …\nCalls <code>TestDBKeys::new()</code> using the provided values. This is …\nCalls <code>TestDBKeys::new()</code> using the provided values. This is …\nCalls <code>TestDBKeys::new()</code> using the provided values. This is …\nCalls <code>TestDBValues::new()</code> using the provided values. This …\nCalls <code>TestDBValues::new()</code> using the provided values. This …\nCalls <code>TestDBValues::new()</code> using the provided values. This …\nDeletes a set of keys given as an iterator\nDeletes a range of keys between <code>from</code> (inclusive) and <code>to</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninserts a range of (key, value) pairs given as an iterator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function drops all internally referencing fields and …\nThis function drops all internally referencing fields and …\nThis function drops all internally referencing fields and …\nConstructs a new instance of this self-referential struct. …\nConstructs a new instance of this self-referential struct. …\nConstructs a new instance of this self-referential struct. …\nConstructs a new instance of this self-referential struct. …\nConstructs a new instance of this self-referential struct. …\nConstructs a new instance of this self-referential struct. …\nConstructs a new instance of this self-referential struct. …\nConstructs a new instance of this self-referential struct. …\nConstructs a new instance of this self-referential struct. …\nWill give the next item backwards\nWill make the direction of the iteration reverse and will …\nMoves the iterator to the element given or the one prior …\nSkips all the elements that are smaller than the given key,\nSeeks to the last key in the database (at this column …\nCalls <code>TestDBIter::try_new()</code> using the provided values. …\nCalls <code>TestDBIter::try_new()</code> using the provided values. …\nCalls <code>TestDBIter::try_new()</code> using the provided values. …\nCalls <code>TestDBKeys::try_new()</code> using the provided values. …\nCalls <code>TestDBKeys::try_new()</code> using the provided values. …\nCalls <code>TestDBKeys::try_new()</code> using the provided values. …\nCalls <code>TestDBValues::try_new()</code> using the provided values. …\nCalls <code>TestDBValues::try_new()</code> using the provided values. …\nCalls <code>TestDBValues::try_new()</code> using the provided values. …\nCalls <code>TestDBIter::try_new_or_recover()</code> using the provided …\nCalls <code>TestDBIter::try_new_or_recover()</code> using the provided …\nCalls <code>TestDBIter::try_new_or_recover()</code> using the provided …\nCalls <code>TestDBKeys::try_new_or_recover()</code> using the provided …\nCalls <code>TestDBKeys::try_new_or_recover()</code> using the provided …\nCalls <code>TestDBKeys::try_new_or_recover()</code> using the provided …\nCalls <code>TestDBValues::try_new_or_recover()</code> using the …\nCalls <code>TestDBValues::try_new_or_recover()</code> using the …\nCalls <code>TestDBValues::try_new_or_recover()</code> using the …\n(See also <code>TestDBIterTryBuilder::try_build()</code>.) Like <code>new</code>, …\n(See also <code>TestDBKeysTryBuilder::try_build()</code>.) Like <code>new</code>, …\n(See also <code>TestDBValuesTryBuilder::try_build()</code>.) Like <code>new</code>, …\n(See also <code>TestDBIterAsyncTryBuilder::try_build()</code>.) Like <code>new</code>…\n(See also <code>TestDBKeysAsyncTryBuilder::try_build()</code>.) Like <code>new</code>…\n(See also <code>TestDBValuesAsyncTryBuilder::try_build()</code>.) Like …\n(See also <code>TestDBIterAsyncSendTryBuilder::try_build()</code>.) …\n(See also <code>TestDBKeysAsyncSendTryBuilder::try_build()</code>.) …\n(See also <code>TestDBValuesAsyncSendTryBuilder::try_build()</code>.) …\n(See also <code>TestDBIterTryBuilder::try_build_or_recover()</code>.) …\n(See also <code>TestDBKeysTryBuilder::try_build_or_recover()</code>.) …\n(See also <code>TestDBValuesTryBuilder::try_build_or_recover()</code>.) …\n(See also <code>TestDBIterAsyncTryBuilder::try_build_or_recover()</code>…\n(See also <code>TestDBKeysAsyncTryBuilder::try_build_or_recover()</code>…\n(See also …\n(See also …\n(See also …\n(See also …\nThis method provides immutable references to all tail and …\nThis method provides immutable references to all tail and …\nThis method provides immutable references to all tail and …\nProvides an immutable reference to <code>direction</code>. This method …\nProvides a mutable reference to <code>direction</code>. This method was …\nProvides an immutable reference to <code>iter</code>. This method was …\nProvides an immutable reference to <code>iter</code>. This method was …\nProvides an immutable reference to <code>iter</code>. This method was …\nProvides a mutable reference to <code>iter</code>. This method was …\nProvides a mutable reference to <code>iter</code>. This method was …\nProvides a mutable reference to <code>iter</code>. This method was …\nThis method provides mutable references to all tail fields.\nThis method provides mutable references to all tail fields.\nThis method provides mutable references to all tail fields.\nReturns a vector of values corresponding to the keys …\nReturns true if the map contains a value for the specified …\nReturns true if the map contains a value for the specified …\nCount the entries in the table\nRemoves every key-value pair from the map by deleting the …\nGet a map of table names to key-value types\nDump a DB table with pagination\nReturns the argument unchanged.\nReturns the value for the given key from the map, if it …\nReturns the value for the given key from the map, if it …\nReturns the raw value (serialized bytes) for the given key …\nReturns the raw value (serialized bytes) for the given key …\nInserts the given key-value pair into the map.\nCalls <code>U::from(self)</code>.\nReturns true if the map is empty, otherwise false.\nReturns true if the map is empty, otherwise false.\nReturns an iterator visiting each key-value pair in the …\nReturns an iterator visiting each key-value pair within …\nReturns an iterator over each key in the map.\nReturns an iterator over each key in the map.\nReturns true if the map contains a value for the specified …\nReturns a vector of values corresponding to the keys …\nReturns a vector of values corresponding to the keys …\nReturns a vector of raw values corresponding to the keys …\nInserts key-value pairs, non-atomically.\nRemoves keys, non-atomically.\nGet the name of the DB. This is simply the name of the …\nSimilar to <code>iter_with_bounds</code> but allows specifying …\nRemoves the entry for the given key from the map.\nSame as <code>iter</code> but performs status check.\nUses delete range on the entire key range\nReturn table summary of the input table\nTry to catch up with primary when running as secondary\nTry to catch up with primary when running as secondary\nReturns an unbounded iterator visiting each key-value pair …\nRemoves every key-value pair from the map.\nReturns an iterator over each value in the map.\nReturns an iterator over each value in the map.")