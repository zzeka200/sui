searchState.loadedDescShard("narwhal_crypto", 0, "A trait for sign and verify over an intent message, …\nType aliases selecting the signature algorithm for the …\nCreate a new signature over an intent message.\nWrap a message in an intent message. Currently in Narwhal, …\nVerify the signature on an intent message against the …\nTrait impl’d by aggregated signatures in asymmetric …\nTrait impl’d by RNG’s accepted by fastcrypto.\nTrait impl’d by signatures in asymmetric cryptography.\nCryptographic material with an immediate conversion …\nTrait impl’d by a keys/secret seeds for generating a …\nTrait impl’d by cryptographic material that can be …\nTrait for objects that support an insecure default value …\nTrait impl’d by a public / private key pair in …\nTrait impl’d by recoverable signatures\nTrait impl’d by public / private keypairs that can …\nTrait impl’d by a key/keypair that can create signatures.\nTrait impl’d by private (secret) keys in asymmetric …\nTrait impl’d by concrete types that represent digital …\nTrait impl’d by public keys in asymmetric cryptography.\nCombine signatures into a single aggregated signature.\nBorrow a byte slice representing the serialized form of …\nVerify a batch of aggregate signatures, each consisting of …\nParse an object from its byte representation\nGenerate a new keypair using the given RNG.\nGenerate a new random instance using the given RNG.\nGet the private key.\nGet the public key.\nRecover the public key from this signature.\nRecover the public key from this signature. Assuming that …\nCreate a new signature over a message.\nSign as a recoverable signature.\nSign as a recoverable signature using the given hash …\nUse Self to verify that the provided signature for a given …\nVerify this aggregate signature assuming that all …\nVerify this aggregate signature where the signatures are …\nVerify a recoverable signature by recovering the public …\nVerify a recoverable signature by recovering the public …")