searchState.loadedDescShard("narwhal_primary", 0, "The default channel capacity for each channel of the …\nThe number of shutdown receivers to create on startup. We …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOccupancy of the channel synchronizing batches for …\nTotal received the channel to synchronize missing batches\nAn internal synchronizer channel. Occupancy of the channel …\nTotal received by the channel sending certificates to the …\noccupancy of the channel from the <code>primary::Synchronizer</code> to …\ntotal received on channel from the <code>primary::Synchronizer</code> …\noccupancy of the channel from the <code>Consensus</code> to the …\ntotal received on channel from the <code>Consensus</code> to the …\noccupancy of the channel signaling own committed headers\ntotal received on the channel signaling own committed …\noccupancy of the channel from the <code>primary::Proposer</code> to the …\ntotal received on channel from the <code>primary::Proposer</code> to …\noccupancy of the channel from the <code>primary::Synchronizer</code> to …\ntotal received on channel from the <code>primary::Synchronizer</code> …\noccupancy of the channel from the …\ntotal received on channel from the …\noccupancy of the channel from the …\ntotal received on channel from the …\noccupancy of the channel from the <code>primary::Synchronizer</code> to …\ntotal received on channel from the <code>primary::Synchronizer</code> …\ntotal received on channel from the …\nHolds information about a committed round in consensus. …\nThe state that needs to be persisted for crash-recovery.\nThe default channel size used in the consensus and …\nThe representation of the DAG in memory.\nThe LeaderSchedule is responsible for producing the leader …\nThe number of shutdown receivers to create on startup. We …\nThe time it takes for a certificate from the moment it …\nThe latency between two successful commit rounds\nThe number of certificates committed per commit round\nThe committee information.\nThe number of rounds for which the Dag holds certificates\nKeeps the latest committed certificate (and its parents) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRestores the LeaderSchedule by using the storage. It will …\nThe chosen gc_depth\nCalculates the GC round given a commit round and the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeeps the last committed round for each authority. This …\nThe last committed round from consensus\nThe last committed sub dag. If value is None, it means …\nThe information about the last committed round and …\nThe last time we had a successful leader election\nReturns the leader for the provided round. Keep in mind …\nReturns the certificate originated by the leader of the …\nUnder normal circumstances every odd round should trigger …\nCount leader certificates committed, and whether the …\nOn every even round we expect a leader to be elected and …\nThe leader election schedule to be used when need to find …\nThe most recent round of inserted certificate\nMetrics handler\nCreate a new Bullshark consensus instance.\nProvides the next index to be used for the next produced …\nnumber of bad nodes in the committee\nThe number of committed subdags that will trigger the …\nThe protocol config settings allowing us to enable/disable …\nThe number of certificates from consensus that were …\nThe number of times the consensus state was restored from …\nPersistent storage to safe ensure crash-recovery.\nChecks whether the provided leader is a bad performer and …\nReturns true if certificate is inserted in the dag.\n<code>ToString::to_string</code>, but without panic on OOM.\noccupancy of the channel from the <code>Consensus</code> to …\nUpdate and clean up internal state after committing a …\nAtomically updates the leader swap table with the new …")