searchState.loadedDescShard("narwhal_worker", 0, "TODO: add NarwhalClient trait and implement …\nA client that connects to Narwhal locally.\nThe number of shutdown receivers to create on startup. We …\nDefines the validation procedure for receiving either a …\nSimple validator that accepts all transactions and batches.\nOuter ArcSwapOption allows initialization after the first …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the instance of LocalNarwhalClient for the local …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLazily instantiates LocalNarwhalClient keyed by the …\nSets the instance of LocalNarwhalClient for the local …\nSubmits a transaction to the local Narwhal worker.\nDetermines if a transaction valid for the worker to …\nDetermines if this batch can be voted on\nLatency of broadcasting batches to a quorum in seconds.\nTime taken to create a batch\nNumber of created batches from the batch_maker\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialises the metrics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of parallel worker batches currently processed …\nThe number of pending remote calls to request_batches\noccupancy of the channel from the <code>worker::TxReceiverhandler</code>…\ntotal received from the channel from the …\noccupancy of the channel from the <code>worker::BatchMaker</code> to …\ntotal received from the channel from the <code>worker::BatchMaker</code>…\nCounter of remote/local batch fetch statuses.\nTime it takes to download a payload from local worker peer\nTime it takes to download a payload from remote peer")