(function() {var type_impls = {
"sui_storage":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-OwnedMutexGuard%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-OwnedMutexGuard%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for OwnedMutexGuard&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sui_storage::mutex_table::MutexGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-OwnedMutexGuard%3CT%3E\" class=\"impl\"><a href=\"#impl-Deref-for-OwnedMutexGuard%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for OwnedMutexGuard&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;OwnedMutexGuard&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","sui_storage::mutex_table::MutexGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-OwnedMutexGuard%3CT%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-OwnedMutexGuard%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for OwnedMutexGuard&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;OwnedMutexGuard&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","sui_storage::mutex_table::MutexGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-OwnedMutexGuard%3CT%3E\" class=\"impl\"><a href=\"#impl-Display-for-OwnedMutexGuard%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for OwnedMutexGuard&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","sui_storage::mutex_table::MutexGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-OwnedMutexGuard%3CT%3E\" class=\"impl\"><a href=\"#impl-Drop-for-OwnedMutexGuard%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for OwnedMutexGuard&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","sui_storage::mutex_table::MutexGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OwnedMutexGuard%3CT%3E\" class=\"impl\"><a href=\"#impl-OwnedMutexGuard%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; OwnedMutexGuard&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map</a>&lt;U, F&gt;(this: OwnedMutexGuard&lt;T&gt;, f: F) -&gt; OwnedMappedMutexGuard&lt;T, U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut U</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Makes a new <a href=\"struct@OwnedMappedMutexGuard\"><code>OwnedMappedMutexGuard</code></a> for a component of the locked data.</p>\n<p>This operation cannot fail as the <a href=\"struct@OwnedMutexGuard\"><code>OwnedMutexGuard</code></a> passed in already locked the mutex.</p>\n<p>This is an associated function that needs to be used as <code>OwnedMutexGuard::map(...)</code>. A method\nwould interfere with methods of the same name on the contents of the locked data.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::{Mutex, OwnedMutexGuard};\n<span class=\"kw\">use </span>std::sync::Arc;\n\n<span class=\"attr\">#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n</span><span class=\"kw\">struct </span>Foo(u32);\n\n<span class=\"kw\">let </span>foo = Arc::new(Mutex::new(Foo(<span class=\"number\">1</span>)));\n\n{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mapped = OwnedMutexGuard::map(foo.clone().lock_owned().<span class=\"kw\">await</span>, |f| <span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">0</span>);\n    <span class=\"kw-2\">*</span>mapped = <span class=\"number\">2</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(Foo(<span class=\"number\">2</span>), <span class=\"kw-2\">*</span>foo.lock().<span class=\"kw\">await</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_map</a>&lt;U, F&gt;(\n    this: OwnedMutexGuard&lt;T&gt;,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OwnedMappedMutexGuard&lt;T, U&gt;, OwnedMutexGuard&lt;T&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut U</a>&gt;,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to make a new <a href=\"struct@OwnedMappedMutexGuard\"><code>OwnedMappedMutexGuard</code></a> for a component of the locked data. The\noriginal guard is returned if the closure returns <code>None</code>.</p>\n<p>This operation cannot fail as the <a href=\"struct@OwnedMutexGuard\"><code>OwnedMutexGuard</code></a> passed in already locked the mutex.</p>\n<p>This is an associated function that needs to be used as <code>OwnedMutexGuard::try_map(...)</code>. A\nmethod would interfere with methods of the same name on the contents of the locked data.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::{Mutex, OwnedMutexGuard};\n<span class=\"kw\">use </span>std::sync::Arc;\n\n<span class=\"attr\">#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n</span><span class=\"kw\">struct </span>Foo(u32);\n\n<span class=\"kw\">let </span>foo = Arc::new(Mutex::new(Foo(<span class=\"number\">1</span>)));\n\n{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mapped = OwnedMutexGuard::try_map(foo.clone().lock_owned().<span class=\"kw\">await</span>, |f| <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">0</span>))\n        .expect(<span class=\"string\">\"should not fail\"</span>);\n    <span class=\"kw-2\">*</span>mapped = <span class=\"number\">2</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(Foo(<span class=\"number\">2</span>), <span class=\"kw-2\">*</span>foo.lock().<span class=\"kw\">await</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mutex\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">mutex</a>(this: &amp;OwnedMutexGuard&lt;T&gt;) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Mutex&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the original <code>Arc&lt;Mutex&gt;</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::{Mutex, OwnedMutexGuard};\n\n<span class=\"kw\">async fn </span>unlock_and_relock(guard: OwnedMutexGuard&lt;u32&gt;) -&gt; OwnedMutexGuard&lt;u32&gt; {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"1. contains: {:?}\"</span>, <span class=\"kw-2\">*</span>guard);\n    <span class=\"kw\">let </span>mutex: Arc&lt;Mutex&lt;u32&gt;&gt; = OwnedMutexGuard::mutex(<span class=\"kw-2\">&amp;</span>guard).clone();\n    drop(guard);\n    <span class=\"kw\">let </span>guard = mutex.lock_owned().<span class=\"kw\">await</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"2. contains: {:?}\"</span>, <span class=\"kw-2\">*</span>guard);\n    guard\n}</code></pre></div>\n</div></details></div></details>",0,"sui_storage::mutex_table::MutexGuard"],["<section id=\"impl-Sync-for-OwnedMutexGuard%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-OwnedMutexGuard%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for OwnedMutexGuard&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Sync","sui_storage::mutex_table::MutexGuard"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()