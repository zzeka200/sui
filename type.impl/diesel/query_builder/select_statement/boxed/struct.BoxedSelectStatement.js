(function() {var type_impls = {
"sui_bridge_indexer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; AsInExpression&lt;ST&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: SqlType + TypedExpressionType,\n    Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;: Expression&lt;SqlType = ST&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.InExpression\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.InExpression\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">InExpression</a> = Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;</h4></section></summary><div class='docblock'>Type of the expression returned by [AsInExpression::as_in_expression]</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_in_expression\" class=\"method trait-impl\"><a href=\"#method.as_in_expression\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_in_expression</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as AsInExpression&lt;ST&gt;&gt;::InExpression</h4></section></summary><div class='docblock'>Construct the diesel query dsl representation of\nthe <code>IN (values)</code> clause for the given type</div></details></div></details>","AsInExpression<ST>","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; CombineDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Query\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Query\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Query</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>What kind of query does this type represent?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_all\" class=\"method trait-impl\"><a href=\"#method.union_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect\" class=\"method trait-impl\"><a href=\"#method.intersect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect_all\" class=\"method trait-impl\"><a href=\"#method.intersect_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except\" class=\"method trait-impl\"><a href=\"#method.except\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except_all\" class=\"method trait-impl\"><a href=\"#method.except_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT ALL</code></div></details></div></details>","CombineDsl","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; DistinctDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    DistinctClause: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.distinct</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct\" class=\"method trait-impl\"><a href=\"#method.distinct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as DistinctDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation.</div></details></div></details>","DistinctDsl","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, T, GB&gt; Insertable&lt;T&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    T: Table,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,\n    &lt;&lt;T as Table&gt;::AllColumns as ValidGrouping&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>&gt;&gt;::IsAggregate: MixedAggregates&lt;No, Output = No&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Values\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Values\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Values</a> = InsertFromSelect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, &lt;T as Table&gt;::AllColumns&gt;</h4></section></summary><div class='docblock'>The <code>VALUES</code> clause to insert these records <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method trait-impl\"><a href=\"#method.values\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">values</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as Insertable&lt;T&gt;&gt;::Values</h4></section></summary><div class='docblock'>Construct <code>Self::Values</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_into\" class=\"method trait-impl\"><a href=\"#method.insert_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert_into</a>(self, table: T) -&gt; InsertStatement&lt;T, Self::Values&gt;<div class=\"where\">where\n    T: Table,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Insert <code>self</code> into a given table. <a>Read more</a></div></details></div></details>","Insertable<T>","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; LimitDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    LimitClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.limit</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">limit</a>(\n    self,\n    limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as LimitDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","LimitDsl","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; OffsetDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    OffsetClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.offset</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method trait-impl\"><a href=\"#method.offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset</a>(\n    self,\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as OffsetDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","OffsetDsl","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; Query for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type that this query represents. <a>Read more</a></div></details></div></details>","Query","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct_on\" class=\"method trait-impl\"><a href=\"#method.distinct_on\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct_on</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Self: DistinctOnDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Adds the <code>DISTINCT ON</code> clause to a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method trait-impl\"><a href=\"#method.select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">select</a>&lt;Selection&gt;(self, selection: Selection) -&gt; Self::Output<div class=\"where\">where\n    Selection: Expression,\n    Self: SelectDsl&lt;Selection&gt;,</div></h4></section></summary><div class='docblock'>Adds a <code>SELECT</code> clause to the query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inner_join\" class=\"method trait-impl\"><a href=\"#method.inner_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">inner_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, Inner&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>INNER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_outer_join\" class=\"method trait-impl\"><a href=\"#method.left_outer_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_outer_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>LEFT OUTER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_join\" class=\"method trait-impl\"><a href=\"#method.left_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Alias for <a href=\"QueryDsl::left_outer_join()\"><code>left_outer_join</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: FilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_filter\" class=\"method trait-impl\"><a href=\"#method.or_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">or_filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: OrFilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query using <code>OR</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method trait-impl\"><a href=\"#method.find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find</a>&lt;PK&gt;(self, id: PK) -&gt; Self::Output<div class=\"where\">where\n    Self: FindDsl&lt;PK&gt;,</div></h4></section></summary><div class='docblock'>Attempts to find a single record from the given table by primary key. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order\" class=\"method trait-impl\"><a href=\"#method.order\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Sets the order clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order_by\" class=\"method trait-impl\"><a href=\"#method.order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order_by</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Alias for <code>order</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.then_order_by\" class=\"method trait-impl\"><a href=\"#method.then_order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">then_order_by</a>&lt;Order&gt;(self, order: Order) -&gt; Self::Output<div class=\"where\">where\n    Self: ThenOrderDsl&lt;Order&gt;,</div></h4></section></summary><div class='docblock'>Appends to the <code>ORDER BY</code> clause of this SQL query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.group_by\" class=\"method trait-impl\"><a href=\"#method.group_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">group_by</a>&lt;GB&gt;(self, group_by: GB) -&gt; Self::Output<div class=\"where\">where\n    GB: Expression,\n    Self: GroupByDsl&lt;GB&gt;,</div></h4></section></summary><div class='docblock'>Sets the <code>group by</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.having\" class=\"method trait-impl\"><a href=\"#method.having\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">having</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: HavingDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>HAVING</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed\" class=\"method trait-impl\"><a href=\"#method.into_boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_boxed</a>&lt;'a, DB&gt;(self) -&gt; Self::Output<div class=\"where\">where\n    DB: Backend,\n    Self: BoxedDsl&lt;'a, DB&gt;,</div></h4></section></summary><div class='docblock'>Boxes the pieces of a query into a single type. <a>Read more</a></div></details></div></details>","QueryDsl","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: QueryFragment&lt;DB, &lt;DB as SqlDialect&gt;::SelectStatementSyntax&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, pass: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB>","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB, AnsiSqlSelectStatement&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend&lt;SelectStatementSyntax = AnsiSqlSelectStatement&gt; + DieselReserveSpecialization,\n    QS: QueryFragment&lt;DB&gt;,\n    BoxedLimitOffsetClause&lt;'a, DB&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, out: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB, AnsiSqlSelectStatement>","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryId for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.QueryId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.QueryId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">QueryId</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>A type which uniquely represents <code>Self</code> in a SQL query. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_STATIC_QUERY_ID\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.HAS_STATIC_QUERY_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">HAS_STATIC_QUERY_ID</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Can the SQL generated by <code>Self</code> be uniquely identified by its type? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_id\" class=\"method trait-impl\"><a href=\"#method.query_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">query_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the type id of <code>Self::QueryId</code> if <code>Self::HAS_STATIC_QUERY_ID</code>.\nReturns <code>None</code> otherwise. <a>Read more</a></div></details></div></details>","QueryId","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, Conn, GB&gt; RunQueryDsl&lt;Conn&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Executes the given query, returning a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_iter\" class=\"method trait-impl\"><a href=\"#method.load_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_iter</a>&lt;'conn, 'query, U, B&gt;(\n    self,\n    conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'conn mut Conn</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self::RowIter&lt;'conn&gt;, Error&gt;<div class=\"where\">where\n    'query: 'conn,\n    U: 'conn,\n    Self: LoadQuery&lt;'query, Conn, U, B&gt; + 'conn,</div></h4></section></summary><div class='docblock'>Executes the given query, returning an <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_result\" class=\"method trait-impl\"><a href=\"#method.get_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_result</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;U, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, and returns the affected row. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_results\" class=\"method trait-impl\"><a href=\"#method.get_results\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_results</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, returning an <code>Vec</code> with the affected rows. <a>Read more</a></div></details></div></details>","RunQueryDsl<Conn>","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectNullableDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: IntoNullable,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, &lt;ST as IntoNullable&gt;::Nullable, QS, DB&gt;</h4></section></summary><div class='docblock'>The return type of <code>nullable</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nullable\" class=\"method trait-impl\"><a href=\"#method.nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nullable</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as SelectNullableDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","SelectNullableDsl","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectQuery for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type of the <code>SELECT</code> clause</div></details></div></details>","SelectQuery","sui_bridge_indexer::schema::progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_progress_store::BoxedQuery","sui_bridge_indexer::schema::sui_error_transactions::BoxedQuery","sui_bridge_indexer::schema::token_transfer::BoxedQuery","sui_bridge_indexer::schema::token_transfer_data::BoxedQuery","sui_bridge_indexer::schema::governance_actions::BoxedQuery"]],
"sui_deepbook_indexer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; AsInExpression&lt;ST&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: SqlType + TypedExpressionType,\n    Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;: Expression&lt;SqlType = ST&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.InExpression\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.InExpression\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">InExpression</a> = Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;</h4></section></summary><div class='docblock'>Type of the expression returned by [AsInExpression::as_in_expression]</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_in_expression\" class=\"method trait-impl\"><a href=\"#method.as_in_expression\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_in_expression</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as AsInExpression&lt;ST&gt;&gt;::InExpression</h4></section></summary><div class='docblock'>Construct the diesel query dsl representation of\nthe <code>IN (values)</code> clause for the given type</div></details></div></details>","AsInExpression<ST>","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; CombineDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Query\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Query\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Query</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>What kind of query does this type represent?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_all\" class=\"method trait-impl\"><a href=\"#method.union_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect\" class=\"method trait-impl\"><a href=\"#method.intersect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect_all\" class=\"method trait-impl\"><a href=\"#method.intersect_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except\" class=\"method trait-impl\"><a href=\"#method.except\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except_all\" class=\"method trait-impl\"><a href=\"#method.except_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT ALL</code></div></details></div></details>","CombineDsl","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; DistinctDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    DistinctClause: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.distinct</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct\" class=\"method trait-impl\"><a href=\"#method.distinct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as DistinctDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation.</div></details></div></details>","DistinctDsl","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, T, GB&gt; Insertable&lt;T&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    T: Table,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,\n    &lt;&lt;T as Table&gt;::AllColumns as ValidGrouping&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>&gt;&gt;::IsAggregate: MixedAggregates&lt;No, Output = No&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Values\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Values\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Values</a> = InsertFromSelect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, &lt;T as Table&gt;::AllColumns&gt;</h4></section></summary><div class='docblock'>The <code>VALUES</code> clause to insert these records <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method trait-impl\"><a href=\"#method.values\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">values</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as Insertable&lt;T&gt;&gt;::Values</h4></section></summary><div class='docblock'>Construct <code>Self::Values</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_into\" class=\"method trait-impl\"><a href=\"#method.insert_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert_into</a>(self, table: T) -&gt; InsertStatement&lt;T, Self::Values&gt;<div class=\"where\">where\n    T: Table,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Insert <code>self</code> into a given table. <a>Read more</a></div></details></div></details>","Insertable<T>","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; LimitDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    LimitClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.limit</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">limit</a>(\n    self,\n    limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as LimitDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","LimitDsl","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; OffsetDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    OffsetClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.offset</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method trait-impl\"><a href=\"#method.offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset</a>(\n    self,\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as OffsetDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","OffsetDsl","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; Query for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type that this query represents. <a>Read more</a></div></details></div></details>","Query","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct_on\" class=\"method trait-impl\"><a href=\"#method.distinct_on\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct_on</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Self: DistinctOnDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Adds the <code>DISTINCT ON</code> clause to a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method trait-impl\"><a href=\"#method.select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">select</a>&lt;Selection&gt;(self, selection: Selection) -&gt; Self::Output<div class=\"where\">where\n    Selection: Expression,\n    Self: SelectDsl&lt;Selection&gt;,</div></h4></section></summary><div class='docblock'>Adds a <code>SELECT</code> clause to the query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inner_join\" class=\"method trait-impl\"><a href=\"#method.inner_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">inner_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, Inner&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>INNER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_outer_join\" class=\"method trait-impl\"><a href=\"#method.left_outer_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_outer_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>LEFT OUTER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_join\" class=\"method trait-impl\"><a href=\"#method.left_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Alias for <a href=\"QueryDsl::left_outer_join()\"><code>left_outer_join</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: FilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_filter\" class=\"method trait-impl\"><a href=\"#method.or_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">or_filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: OrFilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query using <code>OR</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method trait-impl\"><a href=\"#method.find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find</a>&lt;PK&gt;(self, id: PK) -&gt; Self::Output<div class=\"where\">where\n    Self: FindDsl&lt;PK&gt;,</div></h4></section></summary><div class='docblock'>Attempts to find a single record from the given table by primary key. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order\" class=\"method trait-impl\"><a href=\"#method.order\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Sets the order clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order_by\" class=\"method trait-impl\"><a href=\"#method.order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order_by</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Alias for <code>order</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.then_order_by\" class=\"method trait-impl\"><a href=\"#method.then_order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">then_order_by</a>&lt;Order&gt;(self, order: Order) -&gt; Self::Output<div class=\"where\">where\n    Self: ThenOrderDsl&lt;Order&gt;,</div></h4></section></summary><div class='docblock'>Appends to the <code>ORDER BY</code> clause of this SQL query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.group_by\" class=\"method trait-impl\"><a href=\"#method.group_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">group_by</a>&lt;GB&gt;(self, group_by: GB) -&gt; Self::Output<div class=\"where\">where\n    GB: Expression,\n    Self: GroupByDsl&lt;GB&gt;,</div></h4></section></summary><div class='docblock'>Sets the <code>group by</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.having\" class=\"method trait-impl\"><a href=\"#method.having\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">having</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: HavingDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>HAVING</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed\" class=\"method trait-impl\"><a href=\"#method.into_boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_boxed</a>&lt;'a, DB&gt;(self) -&gt; Self::Output<div class=\"where\">where\n    DB: Backend,\n    Self: BoxedDsl&lt;'a, DB&gt;,</div></h4></section></summary><div class='docblock'>Boxes the pieces of a query into a single type. <a>Read more</a></div></details></div></details>","QueryDsl","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: QueryFragment&lt;DB, &lt;DB as SqlDialect&gt;::SelectStatementSyntax&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, pass: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB>","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB, AnsiSqlSelectStatement&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend&lt;SelectStatementSyntax = AnsiSqlSelectStatement&gt; + DieselReserveSpecialization,\n    QS: QueryFragment&lt;DB&gt;,\n    BoxedLimitOffsetClause&lt;'a, DB&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, out: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB, AnsiSqlSelectStatement>","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryId for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.QueryId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.QueryId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">QueryId</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>A type which uniquely represents <code>Self</code> in a SQL query. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_STATIC_QUERY_ID\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.HAS_STATIC_QUERY_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">HAS_STATIC_QUERY_ID</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Can the SQL generated by <code>Self</code> be uniquely identified by its type? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_id\" class=\"method trait-impl\"><a href=\"#method.query_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">query_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the type id of <code>Self::QueryId</code> if <code>Self::HAS_STATIC_QUERY_ID</code>.\nReturns <code>None</code> otherwise. <a>Read more</a></div></details></div></details>","QueryId","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, Conn, GB&gt; RunQueryDsl&lt;Conn&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Executes the given query, returning a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_iter\" class=\"method trait-impl\"><a href=\"#method.load_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_iter</a>&lt;'conn, 'query, U, B&gt;(\n    self,\n    conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'conn mut Conn</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self::RowIter&lt;'conn&gt;, Error&gt;<div class=\"where\">where\n    'query: 'conn,\n    U: 'conn,\n    Self: LoadQuery&lt;'query, Conn, U, B&gt; + 'conn,</div></h4></section></summary><div class='docblock'>Executes the given query, returning an <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_result\" class=\"method trait-impl\"><a href=\"#method.get_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_result</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;U, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, and returns the affected row. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_results\" class=\"method trait-impl\"><a href=\"#method.get_results\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_results</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, returning an <code>Vec</code> with the affected rows. <a>Read more</a></div></details></div></details>","RunQueryDsl<Conn>","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectNullableDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: IntoNullable,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, &lt;ST as IntoNullable&gt;::Nullable, QS, DB&gt;</h4></section></summary><div class='docblock'>The return type of <code>nullable</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nullable\" class=\"method trait-impl\"><a href=\"#method.nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nullable</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as SelectNullableDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","SelectNullableDsl","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectQuery for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type of the <code>SELECT</code> clause</div></details></div></details>","SelectQuery","sui_deepbook_indexer::schema::balances::BoxedQuery","sui_deepbook_indexer::schema::flashloans::BoxedQuery","sui_deepbook_indexer::schema::order_fills::BoxedQuery","sui_deepbook_indexer::schema::order_updates::BoxedQuery","sui_deepbook_indexer::schema::pool_prices::BoxedQuery","sui_deepbook_indexer::schema::pools::BoxedQuery","sui_deepbook_indexer::schema::progress_store::BoxedQuery","sui_deepbook_indexer::schema::proposals::BoxedQuery","sui_deepbook_indexer::schema::rebates::BoxedQuery","sui_deepbook_indexer::schema::stakes::BoxedQuery","sui_deepbook_indexer::schema::sui_error_transactions::BoxedQuery","sui_deepbook_indexer::schema::trade_params_update::BoxedQuery","sui_deepbook_indexer::schema::votes::BoxedQuery","sui_deepbook_indexer::schema::balances_summary::BoxedQuery"]],
"sui_indexer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; AsInExpression&lt;ST&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: SqlType + TypedExpressionType,\n    Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;: Expression&lt;SqlType = ST&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.InExpression\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.InExpression\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">InExpression</a> = Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;</h4></section></summary><div class='docblock'>Type of the expression returned by [AsInExpression::as_in_expression]</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_in_expression\" class=\"method trait-impl\"><a href=\"#method.as_in_expression\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_in_expression</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as AsInExpression&lt;ST&gt;&gt;::InExpression</h4></section></summary><div class='docblock'>Construct the diesel query dsl representation of\nthe <code>IN (values)</code> clause for the given type</div></details></div></details>","AsInExpression<ST>","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; CombineDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Query\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Query\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Query</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>What kind of query does this type represent?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_all\" class=\"method trait-impl\"><a href=\"#method.union_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect\" class=\"method trait-impl\"><a href=\"#method.intersect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect_all\" class=\"method trait-impl\"><a href=\"#method.intersect_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except\" class=\"method trait-impl\"><a href=\"#method.except\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except_all\" class=\"method trait-impl\"><a href=\"#method.except_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT ALL</code></div></details></div></details>","CombineDsl","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; DistinctDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    DistinctClause: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.distinct</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct\" class=\"method trait-impl\"><a href=\"#method.distinct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as DistinctDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation.</div></details></div></details>","DistinctDsl","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, T, GB&gt; Insertable&lt;T&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    T: Table,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,\n    &lt;&lt;T as Table&gt;::AllColumns as ValidGrouping&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>&gt;&gt;::IsAggregate: MixedAggregates&lt;No, Output = No&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Values\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Values\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Values</a> = InsertFromSelect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, &lt;T as Table&gt;::AllColumns&gt;</h4></section></summary><div class='docblock'>The <code>VALUES</code> clause to insert these records <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method trait-impl\"><a href=\"#method.values\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">values</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as Insertable&lt;T&gt;&gt;::Values</h4></section></summary><div class='docblock'>Construct <code>Self::Values</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_into\" class=\"method trait-impl\"><a href=\"#method.insert_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert_into</a>(self, table: T) -&gt; InsertStatement&lt;T, Self::Values&gt;<div class=\"where\">where\n    T: Table,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Insert <code>self</code> into a given table. <a>Read more</a></div></details></div></details>","Insertable<T>","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; LimitDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    LimitClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.limit</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">limit</a>(\n    self,\n    limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as LimitDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","LimitDsl","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; OffsetDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    OffsetClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.offset</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method trait-impl\"><a href=\"#method.offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset</a>(\n    self,\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as OffsetDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","OffsetDsl","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; Query for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type that this query represents. <a>Read more</a></div></details></div></details>","Query","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct_on\" class=\"method trait-impl\"><a href=\"#method.distinct_on\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct_on</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Self: DistinctOnDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Adds the <code>DISTINCT ON</code> clause to a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method trait-impl\"><a href=\"#method.select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">select</a>&lt;Selection&gt;(self, selection: Selection) -&gt; Self::Output<div class=\"where\">where\n    Selection: Expression,\n    Self: SelectDsl&lt;Selection&gt;,</div></h4></section></summary><div class='docblock'>Adds a <code>SELECT</code> clause to the query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inner_join\" class=\"method trait-impl\"><a href=\"#method.inner_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">inner_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, Inner&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>INNER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_outer_join\" class=\"method trait-impl\"><a href=\"#method.left_outer_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_outer_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>LEFT OUTER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_join\" class=\"method trait-impl\"><a href=\"#method.left_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Alias for <a href=\"QueryDsl::left_outer_join()\"><code>left_outer_join</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: FilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_filter\" class=\"method trait-impl\"><a href=\"#method.or_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">or_filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: OrFilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query using <code>OR</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method trait-impl\"><a href=\"#method.find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find</a>&lt;PK&gt;(self, id: PK) -&gt; Self::Output<div class=\"where\">where\n    Self: FindDsl&lt;PK&gt;,</div></h4></section></summary><div class='docblock'>Attempts to find a single record from the given table by primary key. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order\" class=\"method trait-impl\"><a href=\"#method.order\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Sets the order clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order_by\" class=\"method trait-impl\"><a href=\"#method.order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order_by</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Alias for <code>order</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.then_order_by\" class=\"method trait-impl\"><a href=\"#method.then_order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">then_order_by</a>&lt;Order&gt;(self, order: Order) -&gt; Self::Output<div class=\"where\">where\n    Self: ThenOrderDsl&lt;Order&gt;,</div></h4></section></summary><div class='docblock'>Appends to the <code>ORDER BY</code> clause of this SQL query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.group_by\" class=\"method trait-impl\"><a href=\"#method.group_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">group_by</a>&lt;GB&gt;(self, group_by: GB) -&gt; Self::Output<div class=\"where\">where\n    GB: Expression,\n    Self: GroupByDsl&lt;GB&gt;,</div></h4></section></summary><div class='docblock'>Sets the <code>group by</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.having\" class=\"method trait-impl\"><a href=\"#method.having\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">having</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: HavingDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>HAVING</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed\" class=\"method trait-impl\"><a href=\"#method.into_boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_boxed</a>&lt;'a, DB&gt;(self) -&gt; Self::Output<div class=\"where\">where\n    DB: Backend,\n    Self: BoxedDsl&lt;'a, DB&gt;,</div></h4></section></summary><div class='docblock'>Boxes the pieces of a query into a single type. <a>Read more</a></div></details></div></details>","QueryDsl","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: QueryFragment&lt;DB, &lt;DB as SqlDialect&gt;::SelectStatementSyntax&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, pass: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB>","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB, AnsiSqlSelectStatement&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend&lt;SelectStatementSyntax = AnsiSqlSelectStatement&gt; + DieselReserveSpecialization,\n    QS: QueryFragment&lt;DB&gt;,\n    BoxedLimitOffsetClause&lt;'a, DB&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, out: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB, AnsiSqlSelectStatement>","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryId for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.QueryId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.QueryId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">QueryId</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>A type which uniquely represents <code>Self</code> in a SQL query. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_STATIC_QUERY_ID\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.HAS_STATIC_QUERY_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">HAS_STATIC_QUERY_ID</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Can the SQL generated by <code>Self</code> be uniquely identified by its type? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_id\" class=\"method trait-impl\"><a href=\"#method.query_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">query_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the type id of <code>Self::QueryId</code> if <code>Self::HAS_STATIC_QUERY_ID</code>.\nReturns <code>None</code> otherwise. <a>Read more</a></div></details></div></details>","QueryId","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, Conn, GB&gt; RunQueryDsl&lt;Conn&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Executes the given query, returning a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_iter\" class=\"method trait-impl\"><a href=\"#method.load_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_iter</a>&lt;'conn, 'query, U, B&gt;(\n    self,\n    conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'conn mut Conn</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self::RowIter&lt;'conn&gt;, Error&gt;<div class=\"where\">where\n    'query: 'conn,\n    U: 'conn,\n    Self: LoadQuery&lt;'query, Conn, U, B&gt; + 'conn,</div></h4></section></summary><div class='docblock'>Executes the given query, returning an <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_result\" class=\"method trait-impl\"><a href=\"#method.get_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_result</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;U, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, and returns the affected row. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_results\" class=\"method trait-impl\"><a href=\"#method.get_results\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_results</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, returning an <code>Vec</code> with the affected rows. <a>Read more</a></div></details></div></details>","RunQueryDsl<Conn>","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectNullableDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: IntoNullable,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, &lt;ST as IntoNullable&gt;::Nullable, QS, DB&gt;</h4></section></summary><div class='docblock'>The return type of <code>nullable</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nullable\" class=\"method trait-impl\"><a href=\"#method.nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nullable</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as SelectNullableDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","SelectNullableDsl","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectQuery for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type of the <code>SELECT</code> clause</div></details></div></details>","SelectQuery","sui_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_indexer::schema::chain_identifier::BoxedQuery","sui_indexer::schema::checkpoints::BoxedQuery","sui_indexer::schema::display::BoxedQuery","sui_indexer::schema::epochs::BoxedQuery","sui_indexer::schema::event_emit_module::BoxedQuery","sui_indexer::schema::event_emit_package::BoxedQuery","sui_indexer::schema::event_senders::BoxedQuery","sui_indexer::schema::event_struct_instantiation::BoxedQuery","sui_indexer::schema::event_struct_module::BoxedQuery","sui_indexer::schema::event_struct_name::BoxedQuery","sui_indexer::schema::event_struct_package::BoxedQuery","sui_indexer::schema::events::BoxedQuery","sui_indexer::schema::feature_flags::BoxedQuery","sui_indexer::schema::full_objects_history::BoxedQuery","sui_indexer::schema::objects::BoxedQuery","sui_indexer::schema::objects_history::BoxedQuery","sui_indexer::schema::objects_snapshot::BoxedQuery","sui_indexer::schema::objects_version::BoxedQuery","sui_indexer::schema::packages::BoxedQuery","sui_indexer::schema::protocol_configs::BoxedQuery","sui_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_indexer::schema::raw_checkpoints::BoxedQuery","sui_indexer::schema::transactions::BoxedQuery","sui_indexer::schema::tx_affected_addresses::BoxedQuery","sui_indexer::schema::tx_affected_objects::BoxedQuery","sui_indexer::schema::tx_calls_fun::BoxedQuery","sui_indexer::schema::tx_calls_mod::BoxedQuery","sui_indexer::schema::tx_calls_pkg::BoxedQuery","sui_indexer::schema::tx_changed_objects::BoxedQuery","sui_indexer::schema::tx_digests::BoxedQuery","sui_indexer::schema::tx_input_objects::BoxedQuery","sui_indexer::schema::tx_kinds::BoxedQuery","sui_indexer::schema::watermarks::BoxedQuery"]],
"sui_indexer_alt":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; AsInExpression&lt;ST&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: SqlType + TypedExpressionType,\n    Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;: Expression&lt;SqlType = ST&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.InExpression\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.InExpression\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">InExpression</a> = Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;</h4></section></summary><div class='docblock'>Type of the expression returned by [AsInExpression::as_in_expression]</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_in_expression\" class=\"method trait-impl\"><a href=\"#method.as_in_expression\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_in_expression</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as AsInExpression&lt;ST&gt;&gt;::InExpression</h4></section></summary><div class='docblock'>Construct the diesel query dsl representation of\nthe <code>IN (values)</code> clause for the given type</div></details></div></details>","AsInExpression<ST>","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; CombineDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Query\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Query\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Query</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>What kind of query does this type represent?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_all\" class=\"method trait-impl\"><a href=\"#method.union_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect\" class=\"method trait-impl\"><a href=\"#method.intersect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect_all\" class=\"method trait-impl\"><a href=\"#method.intersect_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except\" class=\"method trait-impl\"><a href=\"#method.except\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except_all\" class=\"method trait-impl\"><a href=\"#method.except_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT ALL</code></div></details></div></details>","CombineDsl","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; DistinctDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    DistinctClause: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.distinct</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct\" class=\"method trait-impl\"><a href=\"#method.distinct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as DistinctDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation.</div></details></div></details>","DistinctDsl","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, T, GB&gt; Insertable&lt;T&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    T: Table,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,\n    &lt;&lt;T as Table&gt;::AllColumns as ValidGrouping&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>&gt;&gt;::IsAggregate: MixedAggregates&lt;No, Output = No&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Values\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Values\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Values</a> = InsertFromSelect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, &lt;T as Table&gt;::AllColumns&gt;</h4></section></summary><div class='docblock'>The <code>VALUES</code> clause to insert these records <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method trait-impl\"><a href=\"#method.values\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">values</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as Insertable&lt;T&gt;&gt;::Values</h4></section></summary><div class='docblock'>Construct <code>Self::Values</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_into\" class=\"method trait-impl\"><a href=\"#method.insert_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert_into</a>(self, table: T) -&gt; InsertStatement&lt;T, Self::Values&gt;<div class=\"where\">where\n    T: Table,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Insert <code>self</code> into a given table. <a>Read more</a></div></details></div></details>","Insertable<T>","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; LimitDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    LimitClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.limit</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">limit</a>(\n    self,\n    limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as LimitDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","LimitDsl","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; OffsetDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    OffsetClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.offset</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method trait-impl\"><a href=\"#method.offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset</a>(\n    self,\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as OffsetDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","OffsetDsl","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; Query for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type that this query represents. <a>Read more</a></div></details></div></details>","Query","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct_on\" class=\"method trait-impl\"><a href=\"#method.distinct_on\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct_on</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Self: DistinctOnDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Adds the <code>DISTINCT ON</code> clause to a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method trait-impl\"><a href=\"#method.select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">select</a>&lt;Selection&gt;(self, selection: Selection) -&gt; Self::Output<div class=\"where\">where\n    Selection: Expression,\n    Self: SelectDsl&lt;Selection&gt;,</div></h4></section></summary><div class='docblock'>Adds a <code>SELECT</code> clause to the query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inner_join\" class=\"method trait-impl\"><a href=\"#method.inner_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">inner_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, Inner&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>INNER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_outer_join\" class=\"method trait-impl\"><a href=\"#method.left_outer_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_outer_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>LEFT OUTER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_join\" class=\"method trait-impl\"><a href=\"#method.left_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Alias for <a href=\"QueryDsl::left_outer_join()\"><code>left_outer_join</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: FilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_filter\" class=\"method trait-impl\"><a href=\"#method.or_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">or_filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: OrFilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query using <code>OR</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method trait-impl\"><a href=\"#method.find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find</a>&lt;PK&gt;(self, id: PK) -&gt; Self::Output<div class=\"where\">where\n    Self: FindDsl&lt;PK&gt;,</div></h4></section></summary><div class='docblock'>Attempts to find a single record from the given table by primary key. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order\" class=\"method trait-impl\"><a href=\"#method.order\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Sets the order clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order_by\" class=\"method trait-impl\"><a href=\"#method.order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order_by</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Alias for <code>order</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.then_order_by\" class=\"method trait-impl\"><a href=\"#method.then_order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">then_order_by</a>&lt;Order&gt;(self, order: Order) -&gt; Self::Output<div class=\"where\">where\n    Self: ThenOrderDsl&lt;Order&gt;,</div></h4></section></summary><div class='docblock'>Appends to the <code>ORDER BY</code> clause of this SQL query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.group_by\" class=\"method trait-impl\"><a href=\"#method.group_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">group_by</a>&lt;GB&gt;(self, group_by: GB) -&gt; Self::Output<div class=\"where\">where\n    GB: Expression,\n    Self: GroupByDsl&lt;GB&gt;,</div></h4></section></summary><div class='docblock'>Sets the <code>group by</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.having\" class=\"method trait-impl\"><a href=\"#method.having\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">having</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: HavingDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>HAVING</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed\" class=\"method trait-impl\"><a href=\"#method.into_boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_boxed</a>&lt;'a, DB&gt;(self) -&gt; Self::Output<div class=\"where\">where\n    DB: Backend,\n    Self: BoxedDsl&lt;'a, DB&gt;,</div></h4></section></summary><div class='docblock'>Boxes the pieces of a query into a single type. <a>Read more</a></div></details></div></details>","QueryDsl","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: QueryFragment&lt;DB, &lt;DB as SqlDialect&gt;::SelectStatementSyntax&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, pass: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB>","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB, AnsiSqlSelectStatement&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend&lt;SelectStatementSyntax = AnsiSqlSelectStatement&gt; + DieselReserveSpecialization,\n    QS: QueryFragment&lt;DB&gt;,\n    BoxedLimitOffsetClause&lt;'a, DB&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, out: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB, AnsiSqlSelectStatement>","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryId for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.QueryId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.QueryId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">QueryId</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>A type which uniquely represents <code>Self</code> in a SQL query. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_STATIC_QUERY_ID\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.HAS_STATIC_QUERY_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">HAS_STATIC_QUERY_ID</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Can the SQL generated by <code>Self</code> be uniquely identified by its type? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_id\" class=\"method trait-impl\"><a href=\"#method.query_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">query_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the type id of <code>Self::QueryId</code> if <code>Self::HAS_STATIC_QUERY_ID</code>.\nReturns <code>None</code> otherwise. <a>Read more</a></div></details></div></details>","QueryId","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, Conn, GB&gt; RunQueryDsl&lt;Conn&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Executes the given query, returning a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_iter\" class=\"method trait-impl\"><a href=\"#method.load_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_iter</a>&lt;'conn, 'query, U, B&gt;(\n    self,\n    conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'conn mut Conn</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self::RowIter&lt;'conn&gt;, Error&gt;<div class=\"where\">where\n    'query: 'conn,\n    U: 'conn,\n    Self: LoadQuery&lt;'query, Conn, U, B&gt; + 'conn,</div></h4></section></summary><div class='docblock'>Executes the given query, returning an <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_result\" class=\"method trait-impl\"><a href=\"#method.get_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_result</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;U, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, and returns the affected row. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_results\" class=\"method trait-impl\"><a href=\"#method.get_results\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_results</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, returning an <code>Vec</code> with the affected rows. <a>Read more</a></div></details></div></details>","RunQueryDsl<Conn>","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectNullableDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: IntoNullable,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, &lt;ST as IntoNullable&gt;::Nullable, QS, DB&gt;</h4></section></summary><div class='docblock'>The return type of <code>nullable</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nullable\" class=\"method trait-impl\"><a href=\"#method.nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nullable</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as SelectNullableDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","SelectNullableDsl","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectQuery for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type of the <code>SELECT</code> clause</div></details></div></details>","SelectQuery","sui_indexer_alt::schema::ev_emit_mod::BoxedQuery","sui_indexer_alt::schema::ev_struct_inst::BoxedQuery","sui_indexer_alt::schema::kv_checkpoints::BoxedQuery","sui_indexer_alt::schema::kv_epoch_ends::BoxedQuery","sui_indexer_alt::schema::kv_epoch_starts::BoxedQuery","sui_indexer_alt::schema::kv_feature_flags::BoxedQuery","sui_indexer_alt::schema::kv_genesis::BoxedQuery","sui_indexer_alt::schema::kv_objects::BoxedQuery","sui_indexer_alt::schema::kv_protocol_configs::BoxedQuery","sui_indexer_alt::schema::kv_transactions::BoxedQuery","sui_indexer_alt::schema::obj_info::BoxedQuery","sui_indexer_alt::schema::obj_versions::BoxedQuery","sui_indexer_alt::schema::sum_coin_balances::BoxedQuery","sui_indexer_alt::schema::sum_displays::BoxedQuery","sui_indexer_alt::schema::sum_obj_types::BoxedQuery","sui_indexer_alt::schema::sum_packages::BoxedQuery","sui_indexer_alt::schema::tx_affected_addresses::BoxedQuery","sui_indexer_alt::schema::tx_affected_objects::BoxedQuery","sui_indexer_alt::schema::tx_balance_changes::BoxedQuery","sui_indexer_alt::schema::tx_calls::BoxedQuery","sui_indexer_alt::schema::tx_digests::BoxedQuery","sui_indexer_alt::schema::tx_kinds::BoxedQuery","sui_indexer_alt::schema::wal_coin_balances::BoxedQuery","sui_indexer_alt::schema::wal_obj_types::BoxedQuery"]],
"sui_mvr_indexer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; AsInExpression&lt;ST&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: SqlType + TypedExpressionType,\n    Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;: Expression&lt;SqlType = ST&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.InExpression\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.InExpression\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">InExpression</a> = Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;</h4></section></summary><div class='docblock'>Type of the expression returned by [AsInExpression::as_in_expression]</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_in_expression\" class=\"method trait-impl\"><a href=\"#method.as_in_expression\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_in_expression</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as AsInExpression&lt;ST&gt;&gt;::InExpression</h4></section></summary><div class='docblock'>Construct the diesel query dsl representation of\nthe <code>IN (values)</code> clause for the given type</div></details></div></details>","AsInExpression<ST>","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; CombineDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Query\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Query\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Query</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>What kind of query does this type represent?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_all\" class=\"method trait-impl\"><a href=\"#method.union_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect\" class=\"method trait-impl\"><a href=\"#method.intersect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect_all\" class=\"method trait-impl\"><a href=\"#method.intersect_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except\" class=\"method trait-impl\"><a href=\"#method.except\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except_all\" class=\"method trait-impl\"><a href=\"#method.except_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT ALL</code></div></details></div></details>","CombineDsl","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; DistinctDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    DistinctClause: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.distinct</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct\" class=\"method trait-impl\"><a href=\"#method.distinct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as DistinctDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation.</div></details></div></details>","DistinctDsl","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, T, GB&gt; Insertable&lt;T&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    T: Table,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,\n    &lt;&lt;T as Table&gt;::AllColumns as ValidGrouping&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>&gt;&gt;::IsAggregate: MixedAggregates&lt;No, Output = No&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Values\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Values\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Values</a> = InsertFromSelect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, &lt;T as Table&gt;::AllColumns&gt;</h4></section></summary><div class='docblock'>The <code>VALUES</code> clause to insert these records <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method trait-impl\"><a href=\"#method.values\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">values</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as Insertable&lt;T&gt;&gt;::Values</h4></section></summary><div class='docblock'>Construct <code>Self::Values</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_into\" class=\"method trait-impl\"><a href=\"#method.insert_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert_into</a>(self, table: T) -&gt; InsertStatement&lt;T, Self::Values&gt;<div class=\"where\">where\n    T: Table,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Insert <code>self</code> into a given table. <a>Read more</a></div></details></div></details>","Insertable<T>","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; LimitDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    LimitClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.limit</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">limit</a>(\n    self,\n    limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as LimitDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","LimitDsl","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; OffsetDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    OffsetClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.offset</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method trait-impl\"><a href=\"#method.offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset</a>(\n    self,\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as OffsetDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","OffsetDsl","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; Query for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type that this query represents. <a>Read more</a></div></details></div></details>","Query","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct_on\" class=\"method trait-impl\"><a href=\"#method.distinct_on\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct_on</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Self: DistinctOnDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Adds the <code>DISTINCT ON</code> clause to a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method trait-impl\"><a href=\"#method.select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">select</a>&lt;Selection&gt;(self, selection: Selection) -&gt; Self::Output<div class=\"where\">where\n    Selection: Expression,\n    Self: SelectDsl&lt;Selection&gt;,</div></h4></section></summary><div class='docblock'>Adds a <code>SELECT</code> clause to the query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inner_join\" class=\"method trait-impl\"><a href=\"#method.inner_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">inner_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, Inner&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>INNER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_outer_join\" class=\"method trait-impl\"><a href=\"#method.left_outer_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_outer_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>LEFT OUTER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_join\" class=\"method trait-impl\"><a href=\"#method.left_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Alias for <a href=\"QueryDsl::left_outer_join()\"><code>left_outer_join</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: FilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_filter\" class=\"method trait-impl\"><a href=\"#method.or_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">or_filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: OrFilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query using <code>OR</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method trait-impl\"><a href=\"#method.find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find</a>&lt;PK&gt;(self, id: PK) -&gt; Self::Output<div class=\"where\">where\n    Self: FindDsl&lt;PK&gt;,</div></h4></section></summary><div class='docblock'>Attempts to find a single record from the given table by primary key. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order\" class=\"method trait-impl\"><a href=\"#method.order\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Sets the order clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order_by\" class=\"method trait-impl\"><a href=\"#method.order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order_by</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Alias for <code>order</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.then_order_by\" class=\"method trait-impl\"><a href=\"#method.then_order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">then_order_by</a>&lt;Order&gt;(self, order: Order) -&gt; Self::Output<div class=\"where\">where\n    Self: ThenOrderDsl&lt;Order&gt;,</div></h4></section></summary><div class='docblock'>Appends to the <code>ORDER BY</code> clause of this SQL query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.group_by\" class=\"method trait-impl\"><a href=\"#method.group_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">group_by</a>&lt;GB&gt;(self, group_by: GB) -&gt; Self::Output<div class=\"where\">where\n    GB: Expression,\n    Self: GroupByDsl&lt;GB&gt;,</div></h4></section></summary><div class='docblock'>Sets the <code>group by</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.having\" class=\"method trait-impl\"><a href=\"#method.having\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">having</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: HavingDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>HAVING</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed\" class=\"method trait-impl\"><a href=\"#method.into_boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_boxed</a>&lt;'a, DB&gt;(self) -&gt; Self::Output<div class=\"where\">where\n    DB: Backend,\n    Self: BoxedDsl&lt;'a, DB&gt;,</div></h4></section></summary><div class='docblock'>Boxes the pieces of a query into a single type. <a>Read more</a></div></details></div></details>","QueryDsl","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: QueryFragment&lt;DB, &lt;DB as SqlDialect&gt;::SelectStatementSyntax&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, pass: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB>","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB, AnsiSqlSelectStatement&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend&lt;SelectStatementSyntax = AnsiSqlSelectStatement&gt; + DieselReserveSpecialization,\n    QS: QueryFragment&lt;DB&gt;,\n    BoxedLimitOffsetClause&lt;'a, DB&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, out: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB, AnsiSqlSelectStatement>","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryId for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.QueryId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.QueryId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">QueryId</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>A type which uniquely represents <code>Self</code> in a SQL query. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_STATIC_QUERY_ID\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.HAS_STATIC_QUERY_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">HAS_STATIC_QUERY_ID</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Can the SQL generated by <code>Self</code> be uniquely identified by its type? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_id\" class=\"method trait-impl\"><a href=\"#method.query_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">query_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the type id of <code>Self::QueryId</code> if <code>Self::HAS_STATIC_QUERY_ID</code>.\nReturns <code>None</code> otherwise. <a>Read more</a></div></details></div></details>","QueryId","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, Conn, GB&gt; RunQueryDsl&lt;Conn&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Executes the given query, returning a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_iter\" class=\"method trait-impl\"><a href=\"#method.load_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_iter</a>&lt;'conn, 'query, U, B&gt;(\n    self,\n    conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'conn mut Conn</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self::RowIter&lt;'conn&gt;, Error&gt;<div class=\"where\">where\n    'query: 'conn,\n    U: 'conn,\n    Self: LoadQuery&lt;'query, Conn, U, B&gt; + 'conn,</div></h4></section></summary><div class='docblock'>Executes the given query, returning an <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_result\" class=\"method trait-impl\"><a href=\"#method.get_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_result</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;U, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, and returns the affected row. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_results\" class=\"method trait-impl\"><a href=\"#method.get_results\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_results</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, returning an <code>Vec</code> with the affected rows. <a>Read more</a></div></details></div></details>","RunQueryDsl<Conn>","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectNullableDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: IntoNullable,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, &lt;ST as IntoNullable&gt;::Nullable, QS, DB&gt;</h4></section></summary><div class='docblock'>The return type of <code>nullable</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nullable\" class=\"method trait-impl\"><a href=\"#method.nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nullable</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as SelectNullableDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","SelectNullableDsl","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectQuery for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type of the <code>SELECT</code> clause</div></details></div></details>","SelectQuery","sui_mvr_indexer::db::__diesel_schema_migrations::BoxedQuery","sui_mvr_indexer::schema::chain_identifier::BoxedQuery","sui_mvr_indexer::schema::checkpoints::BoxedQuery","sui_mvr_indexer::schema::display::BoxedQuery","sui_mvr_indexer::schema::epochs::BoxedQuery","sui_mvr_indexer::schema::event_emit_module::BoxedQuery","sui_mvr_indexer::schema::event_emit_package::BoxedQuery","sui_mvr_indexer::schema::event_senders::BoxedQuery","sui_mvr_indexer::schema::event_struct_instantiation::BoxedQuery","sui_mvr_indexer::schema::event_struct_module::BoxedQuery","sui_mvr_indexer::schema::event_struct_name::BoxedQuery","sui_mvr_indexer::schema::event_struct_package::BoxedQuery","sui_mvr_indexer::schema::events::BoxedQuery","sui_mvr_indexer::schema::feature_flags::BoxedQuery","sui_mvr_indexer::schema::full_objects_history::BoxedQuery","sui_mvr_indexer::schema::objects::BoxedQuery","sui_mvr_indexer::schema::objects_history::BoxedQuery","sui_mvr_indexer::schema::objects_snapshot::BoxedQuery","sui_mvr_indexer::schema::objects_version::BoxedQuery","sui_mvr_indexer::schema::packages::BoxedQuery","sui_mvr_indexer::schema::protocol_configs::BoxedQuery","sui_mvr_indexer::schema::pruner_cp_watermark::BoxedQuery","sui_mvr_indexer::schema::raw_checkpoints::BoxedQuery","sui_mvr_indexer::schema::transactions::BoxedQuery","sui_mvr_indexer::schema::tx_affected_addresses::BoxedQuery","sui_mvr_indexer::schema::tx_affected_objects::BoxedQuery","sui_mvr_indexer::schema::tx_calls_fun::BoxedQuery","sui_mvr_indexer::schema::tx_calls_mod::BoxedQuery","sui_mvr_indexer::schema::tx_calls_pkg::BoxedQuery","sui_mvr_indexer::schema::tx_changed_objects::BoxedQuery","sui_mvr_indexer::schema::tx_digests::BoxedQuery","sui_mvr_indexer::schema::tx_input_objects::BoxedQuery","sui_mvr_indexer::schema::tx_kinds::BoxedQuery","sui_mvr_indexer::schema::watermarks::BoxedQuery"]],
"suins_indexer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-AsInExpression%3CST%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; AsInExpression&lt;ST&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: SqlType + TypedExpressionType,\n    Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;: Expression&lt;SqlType = ST&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.InExpression\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.InExpression\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">InExpression</a> = Subselect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, ST&gt;</h4></section></summary><div class='docblock'>Type of the expression returned by [AsInExpression::as_in_expression]</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_in_expression\" class=\"method trait-impl\"><a href=\"#method.as_in_expression\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_in_expression</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as AsInExpression&lt;ST&gt;&gt;::InExpression</h4></section></summary><div class='docblock'>Construct the diesel query dsl representation of\nthe <code>IN (values)</code> clause for the given type</div></details></div></details>","AsInExpression<ST>","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-CombineDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; CombineDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Query\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Query\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Query</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>What kind of query does this type represent?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_all\" class=\"method trait-impl\"><a href=\"#method.union_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Union, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>UNION ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect\" class=\"method trait-impl\"><a href=\"#method.intersect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersect_all\" class=\"method trait-impl\"><a href=\"#method.intersect_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersect_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Intersect, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>INTERSECT ALL</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except\" class=\"method trait-impl\"><a href=\"#method.except\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, Distinct, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.except_all\" class=\"method trait-impl\"><a href=\"#method.except_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">except_all</a>&lt;Rhs&gt;(\n    self,\n    rhs: Rhs,\n) -&gt; CombinationClause&lt;Except, All, &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query, &lt;Rhs as AsQuery&gt;::Query&gt;<div class=\"where\">where\n    Rhs: AsQuery&lt;SqlType = &lt;&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as CombineDsl&gt;::Query as Query&gt;::SqlType&gt;,</div></h4></section></summary><div class='docblock'>Combine two queries using a SQL <code>EXCEPT ALL</code></div></details></div></details>","CombineDsl","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-DistinctDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; DistinctDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    DistinctClause: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.distinct</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct\" class=\"method trait-impl\"><a href=\"#method.distinct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as DistinctDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation.</div></details></div></details>","DistinctDsl","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Insertable%3CT%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, T, GB&gt; Insertable&lt;T&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    T: Table,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: Query,\n    &lt;&lt;T as Table&gt;::AllColumns as ValidGrouping&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>&gt;&gt;::IsAggregate: MixedAggregates&lt;No, Output = No&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Values\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Values\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Values</a> = InsertFromSelect&lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;, &lt;T as Table&gt;::AllColumns&gt;</h4></section></summary><div class='docblock'>The <code>VALUES</code> clause to insert these records <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method trait-impl\"><a href=\"#method.values\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">values</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as Insertable&lt;T&gt;&gt;::Values</h4></section></summary><div class='docblock'>Construct <code>Self::Values</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_into\" class=\"method trait-impl\"><a href=\"#method.insert_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert_into</a>(self, table: T) -&gt; InsertStatement&lt;T, Self::Values&gt;<div class=\"where\">where\n    T: Table,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Insert <code>self</code> into a given table. <a>Read more</a></div></details></div></details>","Insertable<T>","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-LimitDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; LimitDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    LimitClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.limit</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">limit</a>(\n    self,\n    limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as LimitDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","LimitDsl","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-OffsetDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; OffsetDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    OffsetClause&lt;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a> as AsExpression&lt;BigInt&gt;&gt;::Expression&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h4></section></summary><div class='docblock'>The type returned by <code>.offset</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method trait-impl\"><a href=\"#method.offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset</a>(\n    self,\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as OffsetDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","OffsetDsl","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-Query-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; Query for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type that this query represents. <a>Read more</a></div></details></div></details>","Query","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.distinct_on\" class=\"method trait-impl\"><a href=\"#method.distinct_on\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distinct_on</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Self: DistinctOnDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Adds the <code>DISTINCT ON</code> clause to a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method trait-impl\"><a href=\"#method.select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">select</a>&lt;Selection&gt;(self, selection: Selection) -&gt; Self::Output<div class=\"where\">where\n    Selection: Expression,\n    Self: SelectDsl&lt;Selection&gt;,</div></h4></section></summary><div class='docblock'>Adds a <code>SELECT</code> clause to the query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inner_join\" class=\"method trait-impl\"><a href=\"#method.inner_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">inner_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, Inner&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>INNER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_outer_join\" class=\"method trait-impl\"><a href=\"#method.left_outer_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_outer_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Join two tables using a SQL <code>LEFT OUTER JOIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_join\" class=\"method trait-impl\"><a href=\"#method.left_join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">left_join</a>&lt;Rhs&gt;(self, rhs: Rhs) -&gt; Self::Output<div class=\"where\">where\n    Self: JoinWithImplicitOnClause&lt;Rhs, LeftOuter&gt;,</div></h4></section></summary><div class='docblock'>Alias for <a href=\"QueryDsl::left_outer_join()\"><code>left_outer_join</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method trait-impl\"><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: FilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_filter\" class=\"method trait-impl\"><a href=\"#method.or_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">or_filter</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: OrFilterDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>WHERE</code> clause of a query using <code>OR</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method trait-impl\"><a href=\"#method.find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find</a>&lt;PK&gt;(self, id: PK) -&gt; Self::Output<div class=\"where\">where\n    Self: FindDsl&lt;PK&gt;,</div></h4></section></summary><div class='docblock'>Attempts to find a single record from the given table by primary key. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order\" class=\"method trait-impl\"><a href=\"#method.order\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Sets the order clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.order_by\" class=\"method trait-impl\"><a href=\"#method.order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">order_by</a>&lt;Expr&gt;(self, expr: Expr) -&gt; Self::Output<div class=\"where\">where\n    Expr: Expression,\n    Self: OrderDsl&lt;Expr&gt;,</div></h4></section></summary><div class='docblock'>Alias for <code>order</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.then_order_by\" class=\"method trait-impl\"><a href=\"#method.then_order_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">then_order_by</a>&lt;Order&gt;(self, order: Order) -&gt; Self::Output<div class=\"where\">where\n    Self: ThenOrderDsl&lt;Order&gt;,</div></h4></section></summary><div class='docblock'>Appends to the <code>ORDER BY</code> clause of this SQL query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.group_by\" class=\"method trait-impl\"><a href=\"#method.group_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">group_by</a>&lt;GB&gt;(self, group_by: GB) -&gt; Self::Output<div class=\"where\">where\n    GB: Expression,\n    Self: GroupByDsl&lt;GB&gt;,</div></h4></section></summary><div class='docblock'>Sets the <code>group by</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.having\" class=\"method trait-impl\"><a href=\"#method.having\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">having</a>&lt;Predicate&gt;(self, predicate: Predicate) -&gt; Self::Output<div class=\"where\">where\n    Self: HavingDsl&lt;Predicate&gt;,</div></h4></section></summary><div class='docblock'>Adds to the <code>HAVING</code> clause of a query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed\" class=\"method trait-impl\"><a href=\"#method.into_boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_boxed</a>&lt;'a, DB&gt;(self) -&gt; Self::Output<div class=\"where\">where\n    DB: Backend,\n    Self: BoxedDsl&lt;'a, DB&gt;,</div></h4></section></summary><div class='docblock'>Boxes the pieces of a query into a single type. <a>Read more</a></div></details></div></details>","QueryDsl","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,\n    BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;: QueryFragment&lt;DB, &lt;DB as SqlDialect&gt;::SelectStatementSyntax&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, pass: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB>","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryFragment%3CDB,+AnsiSqlSelectStatement%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryFragment&lt;DB, AnsiSqlSelectStatement&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend&lt;SelectStatementSyntax = AnsiSqlSelectStatement&gt; + DieselReserveSpecialization,\n    QS: QueryFragment&lt;DB&gt;,\n    BoxedLimitOffsetClause&lt;'a, DB&gt;: QueryFragment&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, out: AstPass&lt;'_, 'b, DB&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    out: &amp;mut &lt;DB as Backend&gt;::QueryBuilder,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut &lt;DB as Backend&gt;::BindCollector&lt;'b&gt;,\n    metadata_lookup: &amp;mut &lt;DB as TypeMetadata&gt;::MetadataLookup,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'b DB</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Serializes all bind parameters in this query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Is this query safe to store in the prepared statement cache? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, Error&gt;</h4></section></summary><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB, AnsiSqlSelectStatement>","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-QueryId-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; QueryId for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.QueryId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.QueryId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">QueryId</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>A type which uniquely represents <code>Self</code> in a SQL query. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_STATIC_QUERY_ID\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.HAS_STATIC_QUERY_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">HAS_STATIC_QUERY_ID</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>Can the SQL generated by <code>Self</code> be uniquely identified by its type? <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_id\" class=\"method trait-impl\"><a href=\"#method.query_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">query_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the type id of <code>Self::QueryId</code> if <code>Self::HAS_STATIC_QUERY_ID</code>.\nReturns <code>None</code> otherwise. <a>Read more</a></div></details></div></details>","QueryId","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-RunQueryDsl%3CConn%3E-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, Conn, GB&gt; RunQueryDsl&lt;Conn&gt; for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Executes the given query, returning a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_iter\" class=\"method trait-impl\"><a href=\"#method.load_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_iter</a>&lt;'conn, 'query, U, B&gt;(\n    self,\n    conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'conn mut Conn</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self::RowIter&lt;'conn&gt;, Error&gt;<div class=\"where\">where\n    'query: 'conn,\n    U: 'conn,\n    Self: LoadQuery&lt;'query, Conn, U, B&gt; + 'conn,</div></h4></section></summary><div class='docblock'>Executes the given query, returning an <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> with the returned rows. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_result\" class=\"method trait-impl\"><a href=\"#method.get_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_result</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;U, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, and returns the affected row. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_results\" class=\"method trait-impl\"><a href=\"#method.get_results\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_results</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;, Error&gt;<div class=\"where\">where\n    Self: LoadQuery&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, returning an <code>Vec</code> with the affected rows. <a>Read more</a></div></details></div></details>","RunQueryDsl<Conn>","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectNullableDsl-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectNullableDsl for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    ST: IntoNullable,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = BoxedSelectStatement&lt;'a, &lt;ST as IntoNullable&gt;::Nullable, QS, DB&gt;</h4></section></summary><div class='docblock'>The return type of <code>nullable</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nullable\" class=\"method trait-impl\"><a href=\"#method.nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nullable</a>(\n    self,\n) -&gt; &lt;BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt; as SelectNullableDsl&gt;::Output</h4></section></summary><div class='docblock'>See the trait documentation</div></details></div></details>","SelectNullableDsl","suins_indexer::schema::domains::BoxedQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"impl\"><a href=\"#impl-SelectQuery-for-BoxedSelectStatement%3C'a,+ST,+QS,+DB,+GB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, ST, QS, DB, GB&gt; SelectQuery for BoxedSelectStatement&lt;'a, ST, QS, DB, GB&gt;<div class=\"where\">where\n    DB: Backend,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqlType</a> = ST</h4></section></summary><div class='docblock'>The SQL type of the <code>SELECT</code> clause</div></details></div></details>","SelectQuery","suins_indexer::schema::domains::BoxedQuery"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()